/*
 * audio_renderer.c
 *
 *  Created on: 12.03.2017
 *      Author: michaelboeckling
 *
 *  Rev. 17.4.2017/Jorgen Kragh Jakobsen
 *      Added 32 bit entry for i2s output and setup i2c call for Merus Audio power audio amp.
 */

#include <stdbool.h>
#include <math.h>
#include "freertos/FreeRTOS.h"
#define LOG_LOCAL_LEVEL ESP_LOG_VERBOSE
#include "esp_log.h"
#include "soc/rtc.h"
#include <freertos/task.h>
#include <driver/dac.h>
#include "driver/gpio.h"
#include "gpio.h"
#include "app_main.h"
#include "MerusAudio.h"

//#include "freertos/FreeRTOS.h"

//#include "common_component.h"


#include "audio_player.h"
#include "audio_renderer.h"

#define TAG "Renderer"
//https://github.com/amedes/esp_a2dp_sink_spdif/blob/master/main/spdif.c
//#define I2S_BUG_MAGIC		(26 * 1000 * 1000)	// magic number for avoiding I2S bug

static renderer_config_t *renderer_instance = NULL;
static component_status_t renderer_status = UNINITIALIZED;


#define I2S_BITS_PER_SAMPLE	(32)
#define I2S_CHANNELS		2
#define BMC_BITS_PER_SAMPLE	64
#define BMC_BITS_FACTOR		(BMC_BITS_PER_SAMPLE / I2S_BITS_PER_SAMPLE) //64/32=2
#define SPDIF_BLOCK_SAMPLES	192
#define SPDIF_BUF_DIV		2	// double buffering
							//192*8*2=3072
#define SPDIF_BLOCK_SIZE	(SPDIF_BLOCK_SAMPLES * (BMC_BITS_PER_SAMPLE/8) * I2S_CHANNELS)
							//3072/2= 1536
#define SPDIF_BUF_SIZE		(SPDIF_BLOCK_SIZE / SPDIF_BUF_DIV)
								//1536/4= 384
#define SPDIF_BUF_ARRAY_SIZE	(SPDIF_BUF_SIZE / sizeof(uint32_t))

static uint32_t spdif_buf[SPDIF_BUF_ARRAY_SIZE];
static uint32_t *spdif_ptr;

/*
 * 8bit PCM to 16bit BMC conversion table, LSb first, 1 end
 */
static const int16_t bmc_tab[256] = {
    0x3333, 0xb333, 0xd333, 0x5333, 0xcb33, 0x4b33, 0x2b33, 0xab33,
    0xcd33, 0x4d33, 0x2d33, 0xad33, 0x3533, 0xb533, 0xd533, 0x5533,
    0xccb3, 0x4cb3, 0x2cb3, 0xacb3, 0x34b3, 0xb4b3, 0xd4b3, 0x54b3,
    0x32b3, 0xb2b3, 0xd2b3, 0x52b3, 0xcab3, 0x4ab3, 0x2ab3, 0xaab3,
    0xccd3, 0x4cd3, 0x2cd3, 0xacd3, 0x34d3, 0xb4d3, 0xd4d3, 0x54d3,
    0x32d3, 0xb2d3, 0xd2d3, 0x52d3, 0xcad3, 0x4ad3, 0x2ad3, 0xaad3,
    0x3353, 0xb353, 0xd353, 0x5353, 0xcb53, 0x4b53, 0x2b53, 0xab53,
    0xcd53, 0x4d53, 0x2d53, 0xad53, 0x3553, 0xb553, 0xd553, 0x5553,
    0xcccb, 0x4ccb, 0x2ccb, 0xaccb, 0x34cb, 0xb4cb, 0xd4cb, 0x54cb,
    0x32cb, 0xb2cb, 0xd2cb, 0x52cb, 0xcacb, 0x4acb, 0x2acb, 0xaacb,
    0x334b, 0xb34b, 0xd34b, 0x534b, 0xcb4b, 0x4b4b, 0x2b4b, 0xab4b,
    0xcd4b, 0x4d4b, 0x2d4b, 0xad4b, 0x354b, 0xb54b, 0xd54b, 0x554b,
    0x332b, 0xb32b, 0xd32b, 0x532b, 0xcb2b, 0x4b2b, 0x2b2b, 0xab2b,
    0xcd2b, 0x4d2b, 0x2d2b, 0xad2b, 0x352b, 0xb52b, 0xd52b, 0x552b,
    0xccab, 0x4cab, 0x2cab, 0xacab, 0x34ab, 0xb4ab, 0xd4ab, 0x54ab,
    0x32ab, 0xb2ab, 0xd2ab, 0x52ab, 0xcaab, 0x4aab, 0x2aab, 0xaaab,
    0xcccd, 0x4ccd, 0x2ccd, 0xaccd, 0x34cd, 0xb4cd, 0xd4cd, 0x54cd,
    0x32cd, 0xb2cd, 0xd2cd, 0x52cd, 0xcacd, 0x4acd, 0x2acd, 0xaacd,
    0x334d, 0xb34d, 0xd34d, 0x534d, 0xcb4d, 0x4b4d, 0x2b4d, 0xab4d,
    0xcd4d, 0x4d4d, 0x2d4d, 0xad4d, 0x354d, 0xb54d, 0xd54d, 0x554d,
    0x332d, 0xb32d, 0xd32d, 0x532d, 0xcb2d, 0x4b2d, 0x2b2d, 0xab2d,
    0xcd2d, 0x4d2d, 0x2d2d, 0xad2d, 0x352d, 0xb52d, 0xd52d, 0x552d,
    0xccad, 0x4cad, 0x2cad, 0xacad, 0x34ad, 0xb4ad, 0xd4ad, 0x54ad,
    0x32ad, 0xb2ad, 0xd2ad, 0x52ad, 0xcaad, 0x4aad, 0x2aad, 0xaaad,
    0x3335, 0xb335, 0xd335, 0x5335, 0xcb35, 0x4b35, 0x2b35, 0xab35,
    0xcd35, 0x4d35, 0x2d35, 0xad35, 0x3535, 0xb535, 0xd535, 0x5535,
    0xccb5, 0x4cb5, 0x2cb5, 0xacb5, 0x34b5, 0xb4b5, 0xd4b5, 0x54b5,
    0x32b5, 0xb2b5, 0xd2b5, 0x52b5, 0xcab5, 0x4ab5, 0x2ab5, 0xaab5,
    0xccd5, 0x4cd5, 0x2cd5, 0xacd5, 0x34d5, 0xb4d5, 0xd4d5, 0x54d5,
    0x32d5, 0xb2d5, 0xd2d5, 0x52d5, 0xcad5, 0x4ad5, 0x2ad5, 0xaad5,
    0x3355, 0xb355, 0xd355, 0x5355, 0xcb55, 0x4b55, 0x2b55, 0xab55,
    0xcd55, 0x4d55, 0x2d55, 0xad55, 0x3555, 0xb555, 0xd555, 0x5555,
};

// BMC preamble
#define BMC_B		0x33173333	// block start
#define BMC_M		0x331d3333	// left ch
#define BMC_W		0x331b3333	// right ch
#define BMC_MW_DIF	(BMC_M ^ BMC_W)
#define SYNC_OFFSET	2		// byte offset of SYNC
#define SYNC_FLIP	((BMC_B ^ BMC_M) >> (SYNC_OFFSET * 8))

// initialize S/PDIF buffer
static void spdif_buf_init(void)
{
    int i;
    uint32_t bmc_mw = BMC_W;
    for (i = 0; i < SPDIF_BUF_ARRAY_SIZE; i += 2) {
	spdif_buf[i] = bmc_mw ^= BMC_MW_DIF;
    }
	
}

//KaraDio32
void IRAM_ATTR renderer_volume(uint32_t vol)
{
	// log volume (magic)
	if (vol == 1) return;  // volume 0
//	ESP_LOGI(TAG, "Renderer vol: %d %X",vol,vol );
	if (vol >= 255) 
	{
		renderer_instance->volume = 0x10000;
		ESP_LOGD(TAG, "Renderer volume max:  %d  %X",renderer_instance->volume,renderer_instance->volume );
		return;
	}
	vol = 255  - vol;
	uint32_t value = (log10(255/((float)vol+1)) * 105.54571334);	
//	ESP_LOGI(TAG, "Renderer value: %X",value );
	if (value >= 254) value = 256;
	renderer_instance->volume = value<<8; // *256
	ESP_LOGD(TAG, "Renderer volume:  %X",renderer_instance->volume );
}
//-----------

/**
 * I2S is MSB first (big-endian) two's complement (signed) integer format.
 * The I2S module receives and transmits left-channel data first.
 *
 * ESP32 is little-endian.
 */
static void IRAM_ATTR render_i2s_samples(char *buf, uint32_t buf_len, pcm_format_t *buf_desc)
{
//    ESP_LOGV(TAG, "buf_desc: bit_depth %d format %d num_chan %d sample_rate %d", buf_desc->bit_depth, buf_desc->buffer_format, buf_desc->num_channels, buf_desc->sample_rate);
//    ESP_LOGV(TAG, "renderer_instance: bit_depth %d, output_mode %d", renderer_instance->bit_depth, renderer_instance->output_mode);
	 //ESP_LOGI(TAG, "render_samples len: %d",buf_len);
	register int res = ESP_OK;
	uint8_t* outBuf8;
	uint32_t* outBuf32;
	uint64_t* outBuf64;
	
    // handle changed sample rate
    if(renderer_instance->sample_rate != buf_desc->sample_rate)
    {
        ESP_LOGD(TAG, "changing sample rate from %d to %d", renderer_instance->sample_rate, buf_desc->sample_rate);
        uint32_t rate = buf_desc->sample_rate * renderer_instance->sample_rate_modifier;
        res =  i2s_set_sample_rates(renderer_instance->i2s_num, rate);

	    if (res != ESP_OK) {
			ESP_LOGE(TAG, "i2s_set_clk error %d",res);
		}
        else renderer_instance->sample_rate = buf_desc->sample_rate;
    }

    uint8_t buf_bytes_per_sample = (buf_desc->bit_depth / 8);
    uint32_t num_samples = buf_len / buf_bytes_per_sample / buf_desc->num_channels;
//KaraDio32 Volume control
	uint32_t mult = renderer_instance->volume;
	
	if ((mult!= 0x10000)) // && (renderer_instance->output_mode != DAC_BUILT_IN) && (renderer_instance->output_mode != PDM))// need volume?
	{	
		uint32_t pmax= num_samples*buf_desc->num_channels;
		if (buf_bytes_per_sample ==2)
		{
			int16_t *psample;
			psample = (int16_t*)buf;
			for (int32_t i = 0; i < pmax; i++) 
			{
				psample[i] = (((int32_t)psample[i] * mult)>>16);// & 0xFFFF;	
			}
		} else
		{
			int32_t *psample;
			psample = (int32_t*)buf;
			for (int32_t i = 0; i < pmax; i++) 
			{
				psample[i] = ((int64_t)(psample[i] * mult)>>16);// & 0xFFFFFFFF;	
			}
		}			
	}

//-------------------------
//ESP_LOGD(TAG, "I2S CHECK:  buf_desc->bit_depth %d, renderer_instance->bit_depth %d, buf_desc->buffer_format %d, PCM_INTERLEAVED %d, buf_desc->num_channels %d (2), renderer_instance->output_mode %d, DAC_BUILT_IN %d ",buf_desc->bit_depth,renderer_instance->bit_depth,buf_desc->buffer_format,PCM_INTERLEAVED,buf_desc->num_channels,renderer_instance->output_mode,DAC_BUILT_IN);

    // formats match, we can write the whole block
    if (buf_desc->bit_depth == renderer_instance->bit_depth
            && buf_desc->buffer_format == PCM_INTERLEAVED
            && buf_desc->num_channels == 2
            && renderer_instance->output_mode != DAC_BUILT_IN 
			&& renderer_instance->output_mode != PDM
			)
	{
	  if (renderer_status == RUNNING)
	  {
        // don't block, rather retry portMAX_DELAY
        size_t bytes_left = buf_len;
        size_t bytes_written = 0;
        while((bytes_left > 0) ) {//&& (renderer_status == RUNNING)) {
            res = i2s_write(renderer_instance->i2s_num, buf, bytes_left,& bytes_written,3);
/*			if (res != ESP_OK) {
				ESP_LOGE(TAG, "i2s_write error %d",res);
			} */
            bytes_left -= bytes_written;
            buf += bytes_written;
//			if (bytes_left != 0) printf("%d/%d\n",bytes_written,buf_len);
			//vTaskDelay(1);
        }
	  }
      return;
    }

    // support only 16 bit buffers for now
    if(buf_desc->bit_depth != I2S_BITS_PER_SAMPLE_16BIT) {
        ESP_LOGD(TAG, "unsupported decoder bit depth: %d", buf_desc->bit_depth);
		renderer_stop();
		audio_player_stop();    
		return;
    }

    // pointer to left / right sample position
    char *ptr_l = buf;
    char *ptr_r = buf + buf_bytes_per_sample;
    uint8_t stride = buf_bytes_per_sample * 2;

    // right half of the buffer contains all the right channel samples
    if(buf_desc->buffer_format == PCM_LEFT_RIGHT)
    {
        ptr_r = buf + buf_len / 2;
        stride = buf_bytes_per_sample;
    }

    if (buf_desc->num_channels == 1)  // duplicate 
	{
        ptr_r = ptr_l;
    }
	

// har-in-air correction	
	uint32_t outBufBytes = buf_len*(2/buf_desc->num_channels);
	if (renderer_instance->bit_depth == I2S_BITS_PER_SAMPLE_32BIT) outBufBytes <<= 1;
	
	outBuf8 = malloc(outBufBytes);

	if (outBuf8 == NULL) 
	{
		ESP_LOGE(TAG, "malloc outBuf8 failed len:%d ",buf_len);
		renderer_stop();
		audio_player_stop(); 
		return;
	}
	outBuf32 =(uint32_t*)outBuf8;
	outBuf64 = (uint64_t*)outBuf8;

	
    for (int i = 0; i < num_samples; i++) {
        if (renderer_status == STOPPED) break;

        if((renderer_instance->output_mode == DAC_BUILT_IN))//||(renderer_instance->output_mode == PDM))
        {
            // assume 16 bit src bit_depth
            int16_t left = *(int16_t *) ptr_l;
            int16_t right = *(int16_t *) ptr_r;
			
            // The built-in DAC wants unsigned samples, so we shift the range
            // from -32768-32767 to 0-65535.
            left  = left  + 0x8000;
            right = right + 0x8000;					

            uint32_t sample = (uint16_t) left;
            sample = (sample << 16 & 0xffff0000) | ((uint16_t) right);

			outBuf32[i] = sample;
        }
		
        else {

            switch (renderer_instance->bit_depth)
            {
                case I2S_BITS_PER_SAMPLE_16BIT:
                    ; // workaround
                    /* low - high / low - high */
                    const char samp32[4] = {ptr_l[0], ptr_l[1], ptr_r[0], ptr_r[1]};
					outBuf32[i] = (uint32_t)(*((uint32_t*)samp32));					
                    break;

                case I2S_BITS_PER_SAMPLE_32BIT:
                    ; // workaround

                    const char samp64[8] = {0, 0, ptr_l[0], ptr_l[1], 0, 0, ptr_r[0], ptr_r[1]};					
					outBuf64[i] = *((uint64_t*)samp64);
                    break;

                default:
                    ESP_LOGE(TAG, "bit depth unsupported: %d", renderer_instance->bit_depth);
            }
        }

        ptr_r += stride;
        ptr_l += stride;
    }
//
// har-in-air correction	
	size_t bytes_left = outBufBytes  ;
	size_t bytes_written = 0;
		
//	TickType_t max_wait = buf_desc->sample_rate / num_samples / 2;
//    TickType_t max_wait =portMAX_DELAY/2;// portTICK_PERIOD_MS; // portMAX_DELAY = bad idea
//	ESP_LOGI(TAG, "I2S write from %x for %d bytes", (uint32_t)outBuf8, bytes_left);
	uint8_t* iobuf = outBuf8;
	while(bytes_left > 0 && renderer_status != STOPPED) {
		res = i2s_write(renderer_instance->i2s_num, (const char*) iobuf, bytes_left,& bytes_written, 4);
		if (res != ESP_OK) {
			ESP_LOGE(TAG, "i2s_write error %d",res);
		}

        bytes_left -= bytes_written;
        iobuf += (bytes_written  );
    }
	free (outBuf8);
}

// for s/pdif
static bool set_sample_rate(int hz)
{
//  if (!i2sOn) return false;
  if (hz < 32000) return false;
  if (hz == renderer_instance->sample_rate) return true;
  ESP_LOGD(TAG, "Changing S/PDIF from %d to %d", renderer_instance->sample_rate, hz);

  renderer_instance->sample_rate = hz;
  if (i2s_set_sample_rates(renderer_instance->i2s_num, 2 *hz) != ESP_OK) {
    ESP_LOGE(TAG, "ERROR changing S/PDIF sample rate");	  
	return false;
  }	
#if ESP_IDF_VERSION < ESP_IDF_VERSION_VAL(5, 0, 0)  
  if ((2 * hz )== 88200) {  // for sdk 3.3 only
	// Manually fix the APLL rate for 44100.
	// See: https://github.com/espressif/esp-idf/issues/2634
	// sdm0 = 28, sdm1 = 8, sdm2 = 5, odir = 0 -> 88199.977
		rtc_clk_apll_enable(1, 28, 8, 5, 0);
  }	  
#endif
  return true;
}

// S/PDIF volume
static inline void change_volume16(int16_t *buffer, size_t num_samples)
{
	volatile uint32_t mult = renderer_instance->volume;

	if (mult != 0x10000) // && (renderer_instance->output_mode != DAC_BUILT_IN) && (renderer_instance->output_mode != PDM))// need volume?
	{
		int16_t *psample = buffer;
		for (int32_t i = 0; i < num_samples; i++)
		{
			psample[i] = (((uint32_t)buffer[i] * mult) >> 16) & 0xFFFF;
		}
	}
}

// write audio data to I2S buffer
void IRAM_ATTR spdif_write(const void *src, size_t size, size_t num_samples, pcm_format_t *buf_desc)
{
    const uint8_t *p = src;
		// pointer to left / right sample positio
	uint8_t stride = 2;
	uint8_t right = 1 ;
	// right half of the buffer contains all the right channel samples
	if(buf_desc->buffer_format == PCM_LEFT_RIGHT)
	{
		right = num_samples;
		stride = 1;
	}

	if (buf_desc->num_channels == 1) {
		right = 0;
	}
	
    while (p < (uint8_t *)src + size) {

	// convert PCM 16bit data to BMC 32bit pulse pattern
	*(spdif_ptr + 1) = (uint32_t)(((bmc_tab[*p] << 16) ^ bmc_tab[*(p+right)]) << 1) >> 1;

	p += stride;
	spdif_ptr += 2;

//ESP_LOGE(TAG, "st: %d p: %x  l:%x",stride,(unsigned int)p,(unsigned int)ptr_l);
//	spdif_ptr += 2; 	// advance to next audio data
 
	if (spdif_ptr >= &spdif_buf[SPDIF_BUF_ARRAY_SIZE]) {
		size_t i2s_write_len;

	    // set block start preamble
	    ((uint8_t *)spdif_buf)[SYNC_OFFSET] ^= SYNC_FLIP;

	    i2s_write(renderer_instance->i2s_num, spdif_buf, sizeof(spdif_buf), &i2s_write_len, portMAX_DELAY);

	    spdif_ptr = spdif_buf;
	}
    }
}

/* Ported from ESP8266Audio for Ka-Radio32
 * Original source at:
*      https://github.com/earlephilhower/ESP8266Audio/blob/master/src/AudioOutputSPDIF.cpp
*/
static void  render_spdif_samples(const void *buf, uint32_t buf_len, pcm_format_t *buf_desc)
{
	//ESP_LOGI(TAG, "buf_desc: bit_depth %d format %d num_chan %d sample_rate %d", buf_desc->bit_depth, buf_desc->buffer_format, buf_desc->num_channels, buf_desc->sample_rate);
	//    ESP_LOGV(TAG, "renderer_instance: bit_depth %d, output_mode %d", renderer_instance->bit_depth, renderer_instance->output_mode);
	
	int16_t *pcm_buffer = (int16_t*)buf;

	// support only 16 bit buffers for now
	if(buf_desc->bit_depth != I2S_BITS_PER_SAMPLE_16BIT) {
		ESP_LOGE(TAG, "unsupported decoder bit depth: %d", buf_desc->bit_depth);
		renderer_stop();
		audio_player_stop(); 
		return;
	}
//
//-------------------------
	/*ESP_LOGV(TAG, "I2S CHECK:  buf_desc->bit_depth %d, renderer_instance->bit_depth %d, buf_desc->buffer_format %d, PCM_INTERLEAVED %d, buf_desc->num_channels %d (2), renderer_instance->output_mode %d, DAC_BUILT_IN %d ",buf_desc->bit_depth,renderer_instance->bit_depth,buf_desc->buffer_format,PCM_INTERLEAVED,buf_desc->num_channels,renderer_instance->output_mode,DAC_BUILT_IN);
	 */
	uint8_t buf_bytes_per_sample = (buf_desc->bit_depth / 8);
	uint32_t num_samples = buf_len / buf_bytes_per_sample / buf_desc->num_channels;

	// aac max: #define OUTPUT_BUFFER_SIZE  (2048 * sizeof(SHORT) * 2)
	//	mp3max:  short int short_sample_buff[2][32];
	//size_t bytes_cnt = num_samples * sizeof(uint32_t) * 4;
	
//	ESP_LOGI(TAG, "render_spdif_samples len: %d, bytes_cnt: %d",buf_len,bytes_cnt);

    // handle changed sample rate
	if (set_sample_rate(buf_desc->sample_rate) != true) {
		ESP_LOGE(TAG, "i2s_set_clk error");
	}

	// adjust digital volume
	change_volume16(pcm_buffer, num_samples * buf_desc->num_channels);
	if (renderer_status != STOPPED)
		spdif_write(pcm_buffer, buf_len, num_samples, buf_desc);

}

// Decoded frame
void IRAM_ATTR render_samples(char *buf, uint32_t buf_len, pcm_format_t *buf_desc)
{
    if(renderer_status != RUNNING)
        return;

	if(renderer_instance->output_mode == SPDIF)
		render_spdif_samples(buf, buf_len, buf_desc);
	else
		render_i2s_samples(buf, buf_len, buf_desc);
}

void  renderer_zero_dma_buffer()
{
    i2s_zero_dma_buffer(renderer_instance->i2s_num);
}


renderer_config_t *renderer_get()
{
    return renderer_instance;
}


/* init renderer sink */
void renderer_init(renderer_config_t *config)
{
    // update global
    renderer_instance = config;
	renderer_instance->frame_num = 0;

    renderer_status = INITIALIZED;

}


void renderer_start()
{
    if(renderer_status == RUNNING)
        return;
	
    renderer_instance->frame_num = 0;
	ESP_LOGD(TAG, "Start" );
    renderer_status = RUNNING;		
}

void renderer_stop()
{
    if(renderer_status == STOPPED)
        return;
//	if(renderer_status == RUNNING)

    renderer_status = STOPPED;	
	ESP_LOGD(TAG, "Stop" );	

    renderer_instance->frame_num = 0;
}

void renderer_destroy()
{
    renderer_status = UNINITIALIZED;
//    i2s_driver_uninstall(renderer_instance->i2s_num);
}


bool  init_i2s(/*renderer_config_t *config*/)
{
	renderer_config_t *config;
	config = renderer_get();
	
    config->bit_depth = I2S_BITS_PER_SAMPLE_16BIT;
    config->i2s_num = I2S_NUM_0;
    config->sample_rate = 44100;
    config->sample_rate_modifier = 1.0;
    config->output_mode = get_audio_output_mode();	
		
    i2s_mode_t mode = I2S_MODE_MASTER | I2S_MODE_TX;
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 4, 0)
	i2s_comm_format_t comm_fmt = I2S_COMM_FORMAT_STAND_I2S ;
#else	
    i2s_comm_format_t comm_fmt = I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB ;
#endif	
		i2s_bits_per_sample_t bit_depth = config->bit_depth;
	int sample_rate = config->sample_rate;
    int use_apll = 0;
	esp_chip_info_t out_info;
	esp_chip_info(&out_info);

// output_mode *****************************
    if(config->output_mode == I2S_MERUS) {
        config->bit_depth = I2S_BITS_PER_SAMPLE_32BIT;
		bit_depth = config->bit_depth;	
    }

    else if(config->output_mode == DAC_BUILT_IN)
    {
		config->bit_depth = I2S_BITS_PER_SAMPLE_16BIT;
        mode = mode | I2S_MODE_DAC_BUILT_IN;
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 4, 0)
        comm_fmt = I2S_COMM_FORMAT_STAND_MSB;
#else	
		comm_fmt = I2S_COMM_FORMAT_I2S_MSB;
#endif
	}
    else if(config->output_mode == PDM)
    {
        mode = mode | I2S_MODE_PDM;
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 4, 0)
		comm_fmt = I2S_COMM_FORMAT_STAND_PCM_SHORT;
#else
		comm_fmt = I2S_COMM_FORMAT_PCM | I2S_COMM_FORMAT_PCM_SHORT;
#endif	
    }
    else if(config->output_mode == SPDIF)
    {
		bit_depth = I2S_BITS_PER_SAMPLE_32BIT;
		sample_rate = config->sample_rate * 2;
    }
// ******************************************


// apll if possible, not for PDM
	if ((config->output_mode == I2S)||(config->output_mode == I2S_MERUS)
			|| (config->output_mode == SPDIF) )
	{
	/* don't use audio pll on buggy rev0 chips */
	// don't do it for PDM
		if(out_info.revision > 0) {
			use_apll = 1;
			ESP_LOGD(TAG, "chip rev. %d, enabling APLL", out_info.revision);
		} else
			ESP_LOGD(TAG, "chip rev. %d, cannot enable APLL", out_info.revision);
	}
    /*
     * Allocate just enough to decode AAC+, which has huge frame sizes.
     *
     * Memory consumption formula:
     * (bits_per_sample / 8) * num_chan * dma_buf_count * dma_buf_len
     *
     * 16 bit: 32 * 256 = 8192 bytes
     * 32 bit: 32 * 256 = 16384 bytes
     */
	int bc = bigSram()?8:8;
	int bl = bigSram()?192:128;
//	int bcclk = sample_rate * bit_depth * 2 ;
//	int mclk = (I2S_BUG_MAGIC / bcclk) * bcclk; // use mclk for avoiding I2S bug
    i2s_config_t i2s_config = {
            .mode = mode,          // Only TX
            .sample_rate = sample_rate,
            .bits_per_sample = bit_depth,
            .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,   // 2-channels
            .communication_format = comm_fmt,
            .dma_buf_count = bc,                            // number of buffers, 128 max.  16
            .dma_buf_len = bl,                          // size of each buffer 128
            .intr_alloc_flags = 0 ,        // default
			.tx_desc_auto_clear = true,
			.use_apll = use_apll,
//			.fixed_mclk = mclk,	// avoiding I2S bug
    };

	gpio_num_t lrck;
	gpio_num_t bclk;
	gpio_num_t i2sdata;
	gpio_get_i2s(&lrck ,&bclk ,&i2sdata );
	if(config->output_mode == SPDIF)
	{
//		lrck = -1;bclk = -1;
		spdif_buf_init();
		spdif_ptr = spdif_buf;
	}
	
	i2s_pin_config_t pin_config = 
	{
				.bck_io_num = bclk,
				.ws_io_num = lrck,
				.data_out_num = i2sdata,
				.data_in_num = I2S_PIN_NO_CHANGE
	};
	
	ESP_LOGD(TAG, "mode:%d, sample_rate:%d, bit_depth:%d, comm:%d,  data:%d",mode,sample_rate,bit_depth,comm_fmt,i2sdata);

    if (i2s_driver_install(config->i2s_num, &i2s_config, 0, NULL) != ESP_OK)
	{
		ESP_LOGE(TAG,"i2s driver Error");
		return false;
	}	
//	ESP_LOGI(TAG,"i2s intr:%d", i2s_config.intr_alloc_flags);	
    if(config->output_mode == DAC_BUILT_IN)
    {
        i2s_set_pin(config->i2s_num, NULL);
    }
    else {
		if (/*(lrck!=255) && (bclk!=255) && */(i2sdata!=255))
			i2s_set_pin(config->i2s_num, &pin_config);
    }

	
    if(config->output_mode == I2S_MERUS) {
        if (init_ma120(0x50))			// setup ma120x0p and initial volume
			config->output_mode = I2S;	// error, back to I2S
    }
    else if(config->output_mode == SPDIF)
    {
		config->sample_rate = 0;
		set_sample_rate(44100);
    }

 //   i2s_stop(config->i2s_num);
	return true;
}